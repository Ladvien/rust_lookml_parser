extern crate phf;

#[derive(PartialEq, Debug, Clone)]
pub enum Token {
    ILLEGAL(char),
    BOF,
    EOF,
    VIEW,
    INCLUDE,
    DIM,
    DIMGRP,
    MEAS,
    FILT,
    FILTS,
    ACCFILT,
    BFILTS,
    MLAYER,
    PARAMTR,
    SET,
    COLUMN,
    DERIVCOL,
    EXPLORE,
    LINK,
    WHEN,
    ALLWVAL,
    NAMEVALFRMT,
    JOIN,
    DATGRP,
    ACCGRNT,
    SQLSTEP,
    ACTION,
    PARAM,
    FPARAM,
    OPTION,
    USRATTRPARAM,
    ASSERT,
    TEST,
    QUERY,
    EXTNDS,
    AGGTABLE,
    EQL,
    DBLQ,
    CONST,
    SYMB,
    COLON,
    DOT,
    SEMI,
    LCURLY,
    RCURLY,
    LBRACK,
    RBRACK,
    COMMA,
    LKMLCOM,
    NEWL,
    IDENT(Vec<char>),
}

pub fn get_keyword_token(ident: &Vec<char>) -> Result<Token, String> {
    let identifier: String = ident.into_iter().collect();
    match &identifier[..] {
        "view" => Ok(Token::VIEW),
        "include" => Ok(Token::INCLUDE),
        "dimension" => Ok(Token::DIM),
        "dimension_group" => Ok(Token::DIMGRP),
        "measure" => Ok(Token::MEAS),
        "filter" => Ok(Token::FILT),
        "filters" => Ok(Token::FILTS),
        "access_filter" => Ok(Token::ACCFILT),
        "bind_filters" => Ok(Token::BFILTS),
        "map_layer" => Ok(Token::MLAYER),
        "parameter" => Ok(Token::PARAMTR),
        "set" => Ok(Token::SET),
        "column" => Ok(Token::COLUMN),
        "derived_column" => Ok(Token::DERIVCOL),
        "explore" => Ok(Token::EXPLORE),
        "link" => Ok(Token::LINK),
        "when" => Ok(Token::WHEN),
        "allowed_value" => Ok(Token::ALLWVAL),
        "named_value_format" => Ok(Token::NAMEVALFRMT),
        "join" => Ok(Token::JOIN),
        "datagroup" => Ok(Token::DATGRP),
        "access_grant" => Ok(Token::ACCGRNT),
        "sql_step" => Ok(Token::SQLSTEP),
        "action" => Ok(Token::ACTION),
        "param" => Ok(Token::PARAM),
        "form_param" => Ok(Token::FPARAM),
        "option" => Ok(Token::OPTION),
        "user_attribute_param" => Ok(Token::USRATTRPARAM),
        "assert" => Ok(Token::ASSERT),
        "test" => Ok(Token::TEST),
        "query" => Ok(Token::QUERY),
        "extends" => Ok(Token::EXTNDS),
        "aggregate_table" => Ok(Token::AGGTABLE),
        _ => Err(String::from("Not valid token.")),
    }
}
